require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/categories", type: :request do
  let(:user) { create(:user) }

  # This should return the minimal set of attributes required to create a valid
  # Category. As you add validations to Category, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { name: "Test Category", user: user }
  }

  let(:invalid_attributes) {
    { name: "", user: user }
  }

  describe "GET /index" do
    before do
      # Bypass authentication for tests
      allow_any_instance_of(CategoriesController).to receive(:authenticate_user!).and_return(true)
      allow_any_instance_of(CategoriesController).to receive(:current_user).and_return(user)
    end
    it "renders a successful response" do
      create(:category, user: user)
      get categories_url
      expect(response).to be_successful
    end

    it "filters categories by search term" do
      category1 = create(:category, name: "Food", user: user)
      category2 = create(:category, name: "Transport", user: user)
      
      get categories_url, params: { search: "Food" }
      expect(response).to be_successful
      expect(response.body).to include("Food")
      expect(response.body).not_to include("Transport")
    end

    context "sorting" do
      let!(:category1) { create(:category, name: "Alpha", user: user) }
      let!(:category2) { create(:category, name: "Beta", user: user) }
      let!(:expense1) { create(:expense, category: category1, user: user, amount: 100) }
      let!(:expense2) { create(:expense, category: category1, user: user, amount: 50) }
      let!(:income1) { create(:income, category: category2, user: user, amount: 200) }

      it "sorts by name ascending by default" do
        get categories_url
        expect(response).to be_successful
      end

      it "sorts by name ascending when specified" do
        get categories_url, params: { sort_by: "name_asc" }
        expect(response).to be_successful
      end

      it "sorts by name descending when specified" do
        get categories_url, params: { sort_by: "name_desc" }
        expect(response).to be_successful
      end

      it "sorts by most used when specified" do
        get categories_url, params: { sort_by: "usage_count" }
        expect(response).to be_successful
      end
    end

    it "filters by category type" do
      income_category = create(:category, name: "Salary", user: user)
      expense_category = create(:category, name: "Food", user: user)
      create(:income, category: income_category, user: user)
      create(:expense, category: expense_category, user: user)

      get categories_url, params: { category_type: "income" }
      expect(response).to be_successful

      get categories_url, params: { category_type: "expense" }
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      category = create(:category, user: user)
      get category_url(category)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_category_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      category = create(:category, user: user)
      get edit_category_url(category)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Category" do
        expect {
          post categories_url, params: { category: valid_attributes }
        }.to change(Category, :count).by(1)
      end

      it "redirects to the created category" do
        post categories_url, params: { category: valid_attributes }
        expect(response).to redirect_to(category_url(Category.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Category" do
        expect {
          post categories_url, params: { category: invalid_attributes }
        }.to change(Category, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post categories_url, params: { category: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_content)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        { name: "Updated Category Name" }
      }

      it "updates the requested category" do
        category = create(:category, user: user)
        patch category_url(category), params: { category: new_attributes }
        category.reload
        expect(category.name).to eq("Updated Category Name")
      end

      it "redirects to the category" do
        category = create(:category, user: user)
        patch category_url(category), params: { category: new_attributes }
        category.reload
        expect(response).to redirect_to(category_url(category))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        category = create(:category, user: user)
        patch category_url(category), params: { category: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_content)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested category" do
      category = create(:category, user: user)
      expect {
        delete category_url(category)
      }.to change(Category, :count).by(-1)
    end

    it "redirects to the categories list" do
      category = create(:category, user: user)
      delete category_url(category)
      expect(response).to redirect_to(categories_url)
    end
  end
end
